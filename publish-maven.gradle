apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'propdeps-maven'

ext.optionalDeps = []
ext.providedDeps = []

ext.optional = { optionalDeps << it }
ext.provided = { providedDeps << it }

install {
    repositories.mavenInstaller {
        customizePom(pom, project)
    }
}

def customizePom(pom, gradleProject) {
    pom.whenConfigured { generatedPom ->
        generatedPom.artifactId = gradleProject.name

        // respect 'optional' and 'provided' dependencies
        gradleProject.optionalDeps.each { dep ->
            generatedPom.dependencies.find { it.artifactId == dep.name }?.optional = true
        }
        gradleProject.providedDeps.each { dep ->
            generatedPom.dependencies.find { it.artifactId == dep.name }?.scope = 'provided'
        }

        // eliminate test-scoped dependencies (no need in maven central poms)
        generatedPom.dependencies.removeAll { dep ->
            dep.scope == 'test'
        }

        // add all items necessary for maven central publication
        generatedPom.project {
            name = gradleProject.name
            description = gradleProject.description
            url = 'http://projects.spring.io/spring-security-kerberos'
            organization {
                name = 'SpringSource'
                url = 'http://projects.spring.io/spring-security-kerberos/'
            }
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                url = 'https://github.com/chrislong/spring-security-kerberos'
                connection = 'scm:git:git://github.com/chrislong/spring-security-kerberos'
                developerConnection = 'scm:git:git://github.com/chrislong/spring-security-kerberos'
            }
            developers {
                developer {
                    id = 'mwiesner'
                    name = 'Mike Wiesner'
                    email = 'mwiesner@vmware.com'
                }
                developer {
                    id = 'jvalkeal'
                    name = 'Janne Valkealahti'
                    email = 'jvalkealahti@pivotal.io'
                    properties {
                        twitter = 'tunebluez'
                    }
                }
                developer {
                    id = 'chrislong'
                    name = 'Chris Long'
                    email = 'chris.long@nextcentury.com'
                }
            }
        }
    }
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }
    }
  }
}
